{
	"info": {
		"_postman_id": "f93d496e-335b-4b38-8660-2a927188e471",
		"name": "ServeRest - Fluxo Completo QA",
		"description": "# üìò API ServeRest - Testes de Automa√ß√£o de QA com Postman\n\nEsta documenta√ß√£o e cole√ß√£o do Postman foram desenvolvidas como parte de um teste t√©cnico de QA, focando na automa√ß√£o de testes da API p√∫blica [ServeRest](https://serverest.dev). O objetivo √© demonstrar a capacidade de criar fluxos de teste robustos, com valida√ß√£o de dados e cen√°rios de sucesso e falha.\n\n---\n\n## ‚ú® Funcionalidades e Abordagem de Teste\n\nA cole√ß√£o `ServeRest_QA` abrange os seguintes aspectos e fluxos de teste:\n\n* **Organiza√ß√£o Clara:** Requisi√ß√µes organizadas em pastas l√≥gicas (Ex: Auth, Produto, Carrinho).\n* **Descri√ß√µes Detalhadas:** Cada endpoint possui descri√ß√µes claras de seu prop√≥sito e comportamento.\n* **Automa√ß√£o com Postman Scripts:** Utiliza√ß√£o intensiva de scripts na aba \"Tests\" para:\n    * **Valida√ß√£o de Status Code:** Verifica se a resposta da API retorna o c√≥digo HTTP esperado.\n    * **Valida√ß√£o de Mensagens:** Confirma as mensagens de sucesso e erro retornadas pela API.\n    * **Valida√ß√£o de Schema (tv4):** Garante que a estrutura e os tipos de dados das respostas da API est√£o conforme o esperado, aumentando a robustez dos testes.\n    * **Cen√°rios Positivos e Negativos:** Testes para o fluxo de sucesso e para situa√ß√µes de erro esperadas (ex: credenciais inv√°lidas, recurso n√£o encontrado).\n* **Vari√°veis de Ambiente:** Uso estrat√©gico de vari√°veis de ambiente (`baseUrl`, `token`, `userId`, `productId`, `currentTestUserEmail`, `currentTestUserPassword`) para:\n    * Configurar a URL base da API.\n    * Gerenciar dados din√¢micos (e-mails, senhas, IDs) para cada execu√ß√£o de teste.\n    * Permitir que requisi√ß√µes subsequentes utilizem dados gerados por requisi√ß√µes anteriores (ex: token de autentica√ß√£o, ID de produto).\n* **Gera√ß√£o de Dados Din√¢micos:** Utiliza√ß√£o de vari√°veis din√¢micas do Postman (`{{$timestamp}}`, `{{$randomEmail}}`, etc.) e scripts para gerar dados √∫nicos a cada execu√ß√£o, prevenindo conflitos e garantindo a repetibilidade dos testes.\n* **Fluxo de Teste Completo (End-to-End):**\n    1.  **Cria√ß√£o de Usu√°rio (`POST /usuarios`):** Cadastra um novo usu√°rio administrador para os testes.\n    2.  **Login (`POST /login`):** Realiza o login com o usu√°rio rec√©m-criado e armazena o token de autentica√ß√£o na vari√°vel de ambiente `token`.\n    3.  **Cria√ß√£o de Produto (`POST /produtos`):** Cadastra um novo produto, utilizando o token e gerando dados √∫nicos para o produto, salvando seu `_id`.\n    4.  **Edi√ß√£o de Produto (`PUT /produtos/{_id}`):** Atualiza os dados do produto rec√©m-criado, usando o `productId` e o `token`.\n    5.  **Exclus√£o de Produto (`DELETE /produtos/{_id}`):** Remove o produto do sistema, usando o `productId` e o `token`.\n    6.  **Valida√ß√£o de Exclus√£o (`GET /produtos/{_id}`):** Tenta buscar o produto rec√©m-exclu√≠do para confirmar que ele n√£o existe mais (espera-se um erro `400 Bad Request` com mensagem \"Produto n√£o encontrado\").\n    7.  **Valida√ß√£o de Edi√ß√£o P√≥s-Exclus√£o (`PUT /produtos/{_id}`):** Tenta editar o produto ap√≥s sua exclus√£o. Espera-se um erro (`400 Bad Request` com \"Produto n√£o encontrado\"), ou uma `201 Created` caso a API recrie o recurso, o que seria uma falha para o objetivo do teste de \"n√£o poder mais editar\".\n\n---\n\n## üöÄ Como Usar esta Cole√ß√£o\n\nPara executar os testes e explorar a automa√ß√£o:\n\n1.  **Importe o Environment:**\n    * No Postman, v√° em `Environments` (no menu lateral esquerdo).\n    * Clique em `Import` e selecione o arquivo de ambiente associado (Ex: `ServeRest_QA_Environment.postman_environment.json`, se fornecido separadamente, ou ele j√° pode vir embutido na cole√ß√£o).\n    * Certifique-se de que o ambiente `ServeRest_QA_Environment` est√° **selecionado** no dropdown do Postman (canto superior direito).\n\n2.  **Importe a Cole√ß√£o:**\n    * No Postman, v√° em `Collections` (no menu lateral esquerdo).\n    * Clique em `Import` e selecione o arquivo `ServeRest_QA.postman_collection.json`.\n\n3.  **Execute o Fluxo de Testes:**\n    * Na barra lateral de `Collections`, passe o mouse sobre a cole√ß√£o `ServeRest_QA`.\n    * Clique nos tr√™s pontinhos (`...`) e selecione `Run collection`.\n    * No \"Collection Runner\", certifique-se de que:\n        * Seu ambiente `ServeRest_QA_Environment` est√° selecionado.\n        * As requisi√ß√µes est√£o na ordem correta (conforme o fluxo de teste descrito acima). Voc√™ pode arrast√°-las para reordenar se necess√°rio.\n    * Clique em `Run ServeRest_QA` para iniciar a execu√ß√£o automatizada.\n\n4.  **Analise os Resultados:**\n    * O Collection Runner exibir√° o resultado de cada requisi√ß√£o (Pass/Fail) e os detalhes dos testes.\n    * Abra o **Postman Console** (`Ctrl + Alt + C` ou `Cmd + Alt + C`) para ver os logs (`console.log`) dos scripts, que incluem informa√ß√µes sobre vari√°veis salvas (token, IDs).\n\n---\n\n## üìù Observa√ß√µes Importantes\n\n* A API ServeRest possui algumas particularidades:\n    * Retorna `400 Bad Request` com a mensagem \"Produto n√£o encontrado\" para requisi√ß√µes `GET` e `PUT` em IDs que n√£o existem, em vez do mais comum `404 Not Found`. Os scripts de teste foram adaptados para este comportamento.\n    * Em alguns cen√°rios, um `PUT` em um recurso inexistente pode resultar em uma `201 Created` (comportamento de \"upsert\"), o que pode ser uma falha l√≥gica para testes que esperam que o recurso n√£o seja mais edit√°vel ap√≥s a exclus√£o. Os testes refletem essa valida√ß√£o.\n* Os coment√°rios dentro do JSON do `body` das requisi√ß√µes **n√£o s√£o permitidos** pelo JSON padr√£o e foram removidos para garantir a funcionalidade da cole√ß√£o.\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 - Registrar Usu√°rio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.code;",
							"const json = pm.response.json();",
							"",
							"// --- CEN√ÅRIO POSITIVO ---",
							"if (status === 201) {",
							"  pm.test(\"‚úÖ Usu√°rio criado com sucesso - Status 201\", () => {",
							"    pm.expect(json.message).to.eql(\"Cadastro realizado com sucesso\");",
							"    pm.expect(json).to.have.property(\"_id\"); // Garante que o _id est√° na resposta",
							"  });",
							"",
							"  // Salva o ID do usu√°rio novo criado na vari√°vel de ambiente \"userId\"",
							" ",
							"  pm.environment.set(\"userId\", json._id);",
							"  console.log(\"Usu√°rio ID salvo: \" + pm.environment.get(\"userId\")); ",
							"  ",
							"",
							"  const schema = {",
							"    type: \"object\",",
							"    required: [\"message\", \"_id\"],",
							"    properties: {",
							"      message: { type: \"string\" },",
							"      _id: { type: \"string\" }",
							"    }",
							"  };",
							"",
							"  pm.test(\"‚úÖ Schema da resposta est√° v√°lido (201)\", () => {",
							"    pm.expect(tv4.validate(json, schema)).to.be.true;",
							"  });",
							"}",
							"",
							"// --- CEN√ÅRIOS NEGATIVOS ---",
							"else if (status === 400) {",
							"  pm.test(\"‚ùå Requisi√ß√£o inv√°lida - Status 400\", () => {",
							"    pm.expect(json).to.have.property(\"message\");",
							"",
							"    // Valida√ß√£o de mensagens espec√≠ficas",
							"    ",
							"    // ou 'json.email === \"Este email j√° est√° sendo usado\"' (se a API retornar 'email' em vez de 'message' para esse caso)",
							"    if (json.message.includes(\"J√° existe\")) {",
							"      pm.expect(json.message).to.include(\"J√° existe produto com esse nome\"); ",
							"      ",
							"    } else if (json.message.includes(\"nome\")) { // Exemplo para valida√ß√£o de campo",
							"      pm.expect(json.message).to.include(\"nome\");",
							"    }",
							"    // Remove a valida√ß√£o de 'token' aqui, pois 400 √© mais para erros de valida√ß√£o de input,",
							"    // enquanto erro de token √© geralmente 401.",
							"    // else if (json.message.includes(\"token\")) {",
							"    //   pm.expect(json.message).to.include(\"token\");",
							"    // }",
							"  });",
							"",
							"  const errorSchema = {",
							"    type: \"object\",",
							"    required: [\"message\"],",
							"    properties: {",
							"      message: { type: \"string\" }",
							"    }",
							"  };",
							"",
							"  pm.test(\"‚ùå Schema da resposta de erro est√° v√°lido (400)\", () => {",
							"    pm.expect(tv4.validate(json, errorSchema)).to.be.true;",
							"  });",
							"}",
							"// Adicione um bloco espec√≠fico para 401 Unauthorized se o cadastro de usu√°rio puder retornar isso",
							"else if (status === 401) {",
							"    pm.test(\"‚ùå Requisi√ß√£o n√£o autorizada - Status 401\", () => {",
							"        pm.expect(json.message).to.eql(\"Token de acesso ausente, inv√°lido, expirado ou usu√°rio n√£o √© administrador.\");",
							"    });",
							"}",
							"// --- OUTRO STATUS ---",
							"else {",
							"  pm.test(\"‚ö†Ô∏è Status inesperado\", () => {",
							"    pm.expect([201, 400, 401]).to.include(status); // Inclu√≠ 401 na lista de esperados para ter mais controle",
							"  });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um timestamp √∫nico",
							"const timestamp = Date.now();",
							"const userEmail = `usuario.teste.${timestamp}@qa.com.br`;",
							"const userPassword = \"senha\"; // A senha √© fixa neste exemplo, mas poderia ser din√¢mica",
							"",
							"// Salva o email e a senha nas vari√°veis de ambiente",
							"pm.environment.set(\"currentTestUserEmail\", userEmail);",
							"pm.environment.set(\"currentTestUserPassword\", userPassword);",
							"",
							"console.log(\"Gerando novo usu√°rio com E-mail:\", userEmail);",
							"console.log(\"Senha:\", userPassword);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nome\": \"Usu√°rio Teste {{timestamp}}\", \n  \"email\": \"{{currentTestUserEmail}}\", \n  \"password\": \"{{currentTestUserPassword}}\",\n  \"administrador\": \"true\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/usuarios",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 - Login e Salvar Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.code;",
							"const json = pm.response.json();",
							"",
							"// --- CEN√ÅRIO POSITIVO: Login bem-sucedido ---",
							"if (status === 200) {",
							"  pm.test(\"‚úÖ Status code √© 200 OK (Login bem-sucedido)\", () => {",
							"    pm.response.to.have.status(200);",
							"  });",
							"",
							"  pm.test(\"‚úÖ Mensagem de sucesso √© 'Login realizado com sucesso'\", () => {",
							"    pm.expect(json.message).to.eql(\"Login realizado com sucesso\");",
							"  });",
							"",
							"  pm.test(\"‚úÖ Token de autoriza√ß√£o est√° presente e √© v√°lido\", () => {",
							"    pm.expect(json).to.have.property('authorization');",
							"    pm.expect(json.authorization).to.be.a('string').and.to.not.be.empty;",
							"    // Garante que o token come√ßa com \"Bearer \" e tem 3 partes JWT",
							"    pm.expect(json.authorization).to.match(/^Bearer\\s[\\w-]+\\.[\\w-]+\\.[\\w-]+$/);",
							"    // Salva o token de autoriza√ß√£o para uso em outras requisi√ß√µes",
							"    ",
							"    const fullToken = json.authorization; // Ex: \"Bearer eyJhb...\"",
							"    const actualToken = fullToken.replace(\"Bearer \", \"\"); // Pega s√≥ o \"eyJhb...\"",
							"",
							"    pm.environment.set(\"token\", actualToken); // Salva APENAS o token",
							"    console.log(\"Token de autoriza√ß√£o salvo (sem Bearer): \" + pm.environment.get(\"token\"));",
							"  });",
							"",
							"  // Valida√ß√£o de schema da resposta de sucesso",
							"  const schemaSucesso = {",
							"    type: \"object\",",
							"    required: [\"message\", \"authorization\"],",
							"    properties: {",
							"      message: { type: \"string\" },",
							"      authorization: { type: \"string\" }",
							"    }",
							"  };",
							"",
							"  pm.test(\"‚úÖ Schema da resposta de sucesso √© v√°lido\", () => {",
							"    pm.expect(tv4.validate(json, schemaSucesso)).to.be.true;",
							"  });",
							"",
							"}",
							"// --- CEN√ÅRIO NEGATIVO: Credenciais inv√°lidas (401 Unauthorized) ---",
							"else if (status === 401) {",
							"  pm.test(\"‚ùå Login falhou com credenciais inv√°lidas - Status 401 Unauthorized\", () => {",
							"    pm.expect(json.message).to.eql(\"Email e/ou senha inv√°lidos\");",
							"  });",
							"",
							"  const errorSchema401 = {",
							"    type: \"object\",",
							"    required: [\"message\"],",
							"    properties: {",
							"      message: { type: \"string\" }",
							"    }",
							"  };",
							"",
							"  pm.test(\"‚ùå Schema da resposta de erro (401) √© v√°lido\", () => {",
							"    pm.expect(tv4.validate(json, errorSchema401)).to.be.true;",
							"  });",
							"}",
							"// --- CEN√ÅRIO NEGATIVO: Requisi√ß√£o malformada (400 Bad Request) ---",
							"// (Ex: campos ausentes no body ou formato incorreto)",
							"else if (status === 400) {",
							"    pm.test(\"‚ùå Requisi√ß√£o de login malformada - Status 400 Bad Request\", () => {",
							"        pm.expect(json).to.have.property('email'); // Ou 'password' ou 'message' dependendo da API",
							"        ",
							"        // pm.expect(json.email).to.eql(\"email n√£o pode ficar em branco\");",
							"    });",
							"    const errorSchema400 = {",
							"        type: \"object\",",
							"        properties: {",
							"            email: { type: \"string\" },",
							"            password: { type: \"string\" },",
							"            message: { type: \"string\" } // ServeRest pode retornar 'message' para alguns 400",
							"        },",
							"        minProperties: 1 // Garante que h√° pelo menos uma propriedade de erro",
							"    };",
							"    pm.test(\"‚ùå Schema da resposta de erro (400) √© v√°lido\", () => {",
							"        pm.expect(tv4.validate(json, errorSchema400)).to.be.true;",
							"    });",
							"}",
							"// --- OUTRO STATUS INESPERADO ---",
							"else {",
							"  pm.test(\"‚ö†Ô∏è Status inesperado na requisi√ß√£o de login\", () => {",
							"    pm.expect([200, 401, 400]).to.include(status);",
							"  });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{currentTestUserEmail}}\",\n  \"password\": \"{{currentTestUserPassword}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 - Criar Produto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.code;",
							"const json = pm.response.json();",
							"",
							"if (status === 201) {",
							"    pm.test(\"‚úÖ Produto cadastrado com sucesso - Status 201\", () => {",
							"        pm.expect(json.message).to.eql(\"Cadastro realizado com sucesso\");",
							"        pm.expect(json).to.have.property(\"_id\");",
							"    });",
							"",
							"    // Salva o ID do produto para uso em outros testes",
							"    pm.environment.set(\"productId\", json._id);",
							"    console.log(\"Produto ID salvo: \" + pm.environment.get(\"productId\"));",
							"",
							"    const schema = {",
							"        type: \"object\",",
							"        required: [\"message\", \"_id\"],",
							"        properties: {",
							"            message: { \"type\": \"string\" },",
							"            _id: { \"type\": \"string\" }",
							"        }",
							"    };",
							"    pm.test(\"‚úÖ Schema da resposta est√° v√°lido (201)\", () => {",
							"        pm.expect(tv4.validate(json, schema)).to.be.true;",
							"    });",
							"} else if (status === 400) {",
							"    pm.test(\"‚ùå Cadastro de produto falhou - Status 400\", () => {",
							"        pm.expect(json).to.have.property(\"message\");",
							"       ",
							"    });",
							"    ",
							"} else if (status === 401) {",
							"         pm.test(\"‚ùå N√£o autorizado - Status 401\", () => {",
							"            pm.expect(json.message).to.eql(\"Token de acesso ausente, inv√°lido, expirado ou usu√°rio n√£o √© administrador.\");",
							"        });",
							"} else {",
							"    pm.test(\"‚ö†Ô∏è Status inesperado\", () => {",
							"        pm.expect([201, 400, 401]).to.include(status);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nome\": \"Produto Autom√°tico QA {{timestamp}}\",\n  \"preco\": 200,\n  \"descricao\": \"Produto criado via script\",\n  \"quantidade\": 10\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/produtos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"produtos"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Editar Produto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.code;",
							"const json = pm.response.json();",
							"",
							"// --- CEN√ÅRIO POSITIVO: Produto editado com sucesso ---",
							"if (status === 200) {",
							"    pm.test(\"‚úÖ Status code √© 200 OK (Produto editado com sucesso)\", () => {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"‚úÖ Mensagem de sucesso √© 'Registro alterado com sucesso'\", () => {",
							"        pm.expect(json.message).to.eql(\"Registro alterado com sucesso\");",
							"    });",
							"",
							"    // Opcional: Validar que o ID retornado √© o mesmo que foi enviado",
							"    pm.test(\"‚úÖ ID do produto na resposta √© o mesmo da requisi√ß√£o\", () => {",
							"        // Assume que o ID alterado √© retornado em 'json._id'",
							"        // Ou que a requisi√ß√£o PUT √© feita em um ID espec√≠fico",
							"        // Para verificar o ID enviado na requisi√ß√£o:",
							"        const requestUrl = pm.request.url.toString();",
							"        const productIdFromUrl = requestUrl.split('/').pop(); // Pega o √∫ltimo segmento da URL",
							"        pm.expect(productIdFromUrl).to.eql(pm.environment.get(\"productId\"));",
							"    });",
							"",
							"    const schemaSucesso = {",
							"        type: \"object\",",
							"        required: [\"message\"],",
							"        properties: {",
							"            message: { type: \"string\" }",
							"        }",
							"    };",
							"",
							"    pm.test(\"‚úÖ Schema da resposta de sucesso √© v√°lido\", () => {",
							"        pm.expect(tv4.validate(json, schemaSucesso)).to.be.true;",
							"    });",
							"",
							"}",
							"// --- CEN√ÅRIOS NEGATIVOS ---",
							"else if (status === 401) {",
							"    pm.test(\"‚ùå Edi√ß√£o de produto falhou - Status 401 Unauthorized\", () => {",
							"        pm.expect(json.message).to.eql(\"Token de acesso ausente, inv√°lido, expirado ou usu√°rio do token n√£o existe mais\");",
							"    });",
							"    const errorSchema401 = { type: \"object\", required: [\"message\"], properties: { message: { type: \"string\" } } };",
							"    pm.test(\"‚ùå Schema de erro (401) √© v√°lido\", () => { pm.expect(tv4.validate(json, errorSchema401)).to.be.true; });",
							"}",
							"else if (status === 400) {",
							"    pm.test(\"‚ùå Edi√ß√£o de produto falhou - Status 400 Bad Request (Nome duplicado ou erro de valida√ß√£o)\", () => {",
							"        pm.expect(json).to.have.property(\"message\");",
							"        // Pode haver diferentes mensagens para 400: \"J√° existe produto com esse nome\", valida√ß√µes de campo",
							"        pm.expect(json.message).to.include(\"J√° existe produto com esse nome\"); // Exemplo",
							"    });",
							"    const errorSchema400 = { type: \"object\", required: [\"message\"], properties: { message: { type: \"string\" } } };",
							"    pm.test(\"‚ùå Schema de erro (400) √© v√°lido\", () => { pm.expect(tv4.validate(json, errorSchema400)).to.be.true; });",
							"}",
							"else if (status === 201) { // Caso o PUT do ServeRest retorne 201 em vez de 200 para cria√ß√£o de novo",
							"     pm.test(\"‚ùå Status 201 inesperado para PUT (pode indicar cria√ß√£o em vez de edi√ß√£o)\", () => {",
							"         // Este teste deve falhar se o PUT retornou 201. O PUT deve alterar um existente.",
							"         pm.expect.fail(\"PUT retornou 201, indicando cria√ß√£o em vez de altera√ß√£o.\");",
							"     });",
							"}",
							"// --- OUTRO STATUS INESPERADO ---",
							"else {",
							"    pm.test(\"‚ö†Ô∏è Status inesperado na edi√ß√£o de produto\", () => {",
							"        pm.expect([200, 401, 400]).to.include(status);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nome\": \"Produto Editado QA {{timestamp}}\",\n  \"preco\": 250,\n  \"descricao\": \"Atualiza√ß√£o de teste\",\n  \"quantidade\": 50\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/produtos/{{productId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"produtos",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 - Excluir Produto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.code;",
							"const json = pm.response.json();",
							"",
							"// --- CEN√ÅRIO POSITIVO: Produto exclu√≠do com sucesso ---",
							"if (status === 200) {",
							"    pm.test(\"‚úÖ Status code √© 200 OK (Produto exclu√≠do com sucesso)\", () => {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"‚úÖ Mensagem de sucesso √© 'Registro exclu√≠do com sucesso'\", () => {",
							"        pm.expect(json.message).to.eql(\"Registro exclu√≠do com sucesso\");",
							"    });",
							"",
							"    const schemaSucesso = {",
							"        type: \"object\",",
							"        required: [\"message\"],",
							"        properties: {",
							"            message: { type: \"string\" }",
							"        }",
							"    };",
							"",
							"    pm.test(\"‚úÖ Schema da resposta de sucesso √© v√°lido\", () => {",
							"        pm.expect(tv4.validate(json, schemaSucesso)).to.be.true;",
							"    });",
							"",
							"    // Opcional: Limpar a vari√°vel productId ap√≥s a exclus√£o para evitar uso indevido",
							"    // pm.environment.unset(\"productId\");",
							"    // console.log(\"Vari√°vel productId limpa ap√≥s exclus√£o.\");",
							"",
							"}",
							"// --- CEN√ÅRIOS NEGATIVOS ---",
							"else if (status === 401) {",
							"    pm.test(\"‚ùå Exclus√£o de produto falhou - Status 401 Unauthorized\", () => {",
							"        pm.expect(json.message).to.eql(\"Token de acesso ausente, inv√°lido, expirado ou usu√°rio do token n√£o existe mais\");",
							"    });",
							"    const errorSchema401 = { type: \"object\", required: [\"message\"], properties: { message: { type: \"string\" } } };",
							"    pm.test(\"‚ùå Schema de erro (401) √© v√°lido\", () => { pm.expect(tv4.validate(json, errorSchema401)).to.be.true; });",
							"}",
							"else if (status === 404) { // Se o produto n√£o foi encontrado (j√° exclu√≠do ou ID inv√°lido)",
							"    pm.test(\"‚ùå Exclus√£o de produto falhou - Status 404 Not Found (Produto n√£o existe)\", () => {",
							"        pm.expect(json.message).to.eql(\"Produto n√£o encontrado\");",
							"    });",
							"    const errorSchema404 = { type: \"object\", required: [\"message\"], properties: { message: { type: \"string\" } } };",
							"    pm.test(\"‚ùå Schema de erro (404) √© v√°lido\", () => { pm.expect(tv4.validate(json, errorSchema404)).to.be.true; });",
							"}",
							"// --- OUTRO STATUS INESPERADO ---",
							"else {",
							"    pm.test(\"‚ö†Ô∏è Status inesperado na exclus√£o de produto\", () => {",
							"        pm.expect([200, 401, 404]).to.include(status);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/produtos/{{productId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"produtos",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 - Verificar Exclus√£o",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.code;",
							"const json = pm.response.json();",
							"",
							"pm.test(\"‚úÖ Status code √© 400 Bad Request (Produto n√£o deveria ser encontrado ap√≥s exclus√£o)\", () => {",
							"    pm.expect(status).to.eql(400); ",
							"});",
							"",
							"pm.test(\"‚úÖ Mensagem de erro √© 'Produto n√£o encontrado'\", () => {",
							"    pm.expect(json.message).to.eql(\"Produto n√£o encontrado\");",
							"});",
							"",
							"// Opcional: Validar o schema para 400",
							"const errorSchema400 = { // Renomeado para 400",
							"    type: \"object\",",
							"    required: [\"message\"],",
							"    properties: {",
							"        message: { type: \"string\" }",
							"    }",
							"};",
							"pm.test(\"‚úÖ Schema da resposta de erro (400) √© v√°lido\", () => { ",
							"    pm.expect(tv4.validate(json, errorSchema400)).to.be.true;",
							"});",
							"",
							"// Se, por algum motivo, o status for 200 (indica que o DELETE falhou)",
							"if (status === 200) {",
							"    pm.test(\"‚ùå Erro: Produto encontrado ap√≥s a exclus√£o (Status 200 inesperado)\", () => {",
							"        pm.expect.fail(\"O produto foi encontrado ap√≥s a tentativa de exclus√£o. O DELETE falhou.\");",
							"    });",
							"}",
							"// Outros status inesperados",
							"else if (status !== 400) { // Agora verifica se n√£o √© 400, nem 200",
							"    pm.test(\"‚ö†Ô∏è Status inesperado na verifica√ß√£o de produto exclu√≠do\", () => {",
							"        pm.expect([400, 200]).to.include(status); // 200 √© falha para este teste",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/produtos/{{productId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"produtos",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6 - Tentar Editar Produto Ap√≥s Exclus√£o",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const status = pm.response.code;",
							"const json = pm.response.json();",
							"",
							"// --- CEN√ÅRIO POSITIVO (para este teste): Edi√ß√£o falha com 400 ou 404 (se ServeRest tivesse 404) ---",
							"// Como o ServeRest retorna 400 para 'n√£o encontrado' em GET, √© prov√°vel que PUT tamb√©m.",
							"// E se ele retornar 201, significa que ele recriou, o que tamb√©m √© um erro para o seu objetivo de \"n√£o poder mais editar\".",
							"if (status === 400) { // O esperado √© 400, com a mensagem de \"Produto n√£o encontrado\"",
							"    pm.test(\"‚úÖ Status code √© 400 Bad Request (Produto n√£o existe para edi√ß√£o)\", () => {",
							"        pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"‚úÖ Mensagem de erro √© 'Produto n√£o encontrado'\", () => {",
							"        pm.expect(json.message).to.eql(\"Produto n√£o encontrado\");",
							"    });",
							"",
							"    const schemaErro = {",
							"        type: \"object\",",
							"        required: [\"message\"],",
							"        properties: {",
							"            message: { type: \"string\" }",
							"        }",
							"    };",
							"",
							"    pm.test(\"‚úÖ Schema da resposta de erro (400) √© v√°lido\", () => {",
							"        pm.expect(tv4.validate(json, schemaErro)).to.be.true;",
							"    });",
							"}",
							"// --- CEN√ÅRIO NEGATIVO (para este teste): Outros erros ou sucesso inesperado ---",
							"else if (status === 201) { // Se retornar 201, ele criou o produto novamente, o que √© uma falha para este teste",
							"    pm.test(\"‚ùå Edi√ß√£o de produto resultou em cria√ß√£o inesperada (Status 201)\", () => {",
							"        pm.expect.fail(\"Produto foi criado novamente ap√≥s a exclus√£o. N√£o deveria ser poss√≠vel editar/criar.\");",
							"    });",
							"}",
							"else if (status === 200) { // Se retornar 200, ele editou o produto, o que √© uma falha para este teste",
							"    pm.test(\"‚ùå Edi√ß√£o de produto sucedeu inesperadamente (Status 200)\", () => {",
							"        pm.expect.fail(\"Produto foi editado com sucesso, mas deveria ter sido exclu√≠do.\");",
							"    });",
							"}",
							"else if (status === 401) {",
							"    pm.test(\"‚ùå Edi√ß√£o de produto falhou com 401 (Token inv√°lido, n√£o 400)\", () => {",
							"        pm.expect(json.message).to.eql(\"Token de acesso ausente, inv√°lido, expirado ou usu√°rio do token n√£o existe mais\");",
							"    });",
							"}",
							"",
							"else {",
							"    pm.test(\"‚ö†Ô∏è Status inesperado ao tentar editar produto exclu√≠do\", () => {",
							"        // Agora, os status esperados para uma FALHA s√£o 400 (produto n√£o existe), ou 401 (token)",
							"        // Se ele retornar 200 ou 201, isso √© uma FALHA para o objetivo deste teste",
							"        pm.expect([400, 401]).to.include(status);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"nome\": \"Produto Exclu√≠do - Tentativa de Edi√ß√£o {{timestamp}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentando editar produto que n√£o existe\",\n  \"quantidade\": 12\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/produtos/{{productId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"produtos",
						"{{productId}}"
					]
				}
			},
			"response": []
		}
	]
}